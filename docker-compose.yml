services:
  dns:
    image: strm/dnsmasq:latest
    container_name: dns_service
    restart: unless-stopped
    ports:
      - "53:53/udp"
      - "53:53"
    cap_add:
      - CAP_NET_ADMIN
    volumes: # mounting the config file as a temp file to make further changes to it after the container is started
      - ./Configurations/dnsmasq.conf:/tmp/dns.conf:ro
    post_start:
      - command: ["cp", "/tmp/dns.conf", "/etc/dnsmasq.conf"]
        user: root
      - command: ["sed", "-i", "s/127.0.0.1/${HOST_IP:-192.168.1.64}/", /etc/dnsmasq.conf]
        user: root

  scanner:
    image: sbs20/scanservjs:latest
    container_name: sane_scanner_service
    restart: unless-stopped
    # command: ["sleep","infinity"] # run ubuntu container withoout docker run
    environment:
      - SANED_NET_HOSTS=${HOST_IP:-192.168.1.64} # This is the real ip of the host containing the scanner
    ports:
      - "8080:8080"
    devices:
      - /dev/canon-pixma-g2060
    device_cgroup_rules:
    - 'c 189:* rmw' # 189 is the major number for usb devices (Printers)
    volumes:
      - /dev:/dev:ro
      - /run/udev:/run/udev:ro
      # - /var/run/dbus:/var/run/dbus
      # - /local/path/cfg:/app/config
      - ./Configurations/sane_dll.conf:/etc/sane.d/dll.conf
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Pictures/Scan:/usr/lib/scanservjs/data/output
    networks:
      - home_server

  cups:
    image: miguel/cups:latest
    build:
      context: ./CustomServices/Cups
      dockerfile: Dockerfile
    container_name: cups_service
    devices:
      - /dev/canon-pixma-g2060
    device_cgroup_rules:
    - 'c 189:* rmw' # 189 is the major number for usb devices (Printers)
    volumes:
      - /run/udev:/run/udev:ro
      - /var/run/dbus:/var/run/dbus
      - /dev:/dev:ro
      # Check the order of the volumes
      - ./.ContainersData/Cups/Services:/services:rw
      - ./.ContainersData/Cups/Config:/config:rw
    # privileged: true
    restart: unless-stopped
    network_mode: host

  samba:
    image: servercontainers/samba:latest
    container_name: samba_service
    restart: unless-stopped
    network_mode: host # !important to help Windows discover the sambas
    # uncomment to solve bug: https://github.com/ServerContainers/samba/issues/50 - wsdd2 only - not needed for samba
    cap_add:
      - CAP_NET_ADMIN
    environment:
      MODEL: TimeCapsule
      AVAHI_NAME: StorageServer
      SAMBA_CONF_LOG_LEVEL: 3
      # uncomment to disable optional services
      #WSDD2_DISABLE: 1
      #AVAHI_DISABLE: 1
      GROUP_admin: 1500
      GROUP_family: 1501

      ACCOUNT_miguel: "miguel:1000:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:74715872EC0CCC0EB3655D6CC40C5340:[U          ]:LCT-678D5C9F:"
      UID_miguel: 1000
      GROUPS_miguel: admin

      ACCOUNT_joseluis: "joseluis:1000:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:6C3A419D050572E3F83F2D53B14FF45D:[U          ]:LCT-678D5D4F:"
      UID_joseluis: 1001
      GROUPS_joseluis: family

      # Examples using environment variables instead of volume config
      # SAMBA_VOLUME_CONFIG_shared_home: "[Home]; path=/shares/homes/%U; valid users = alice, bob, foo; guest ok = no; read only = no; browseable = yes"
      # SAMBA_VOLUME_CONFIG_aliceonly: "[Alice Share]; path=/shares/alice; valid users = alice; guest ok = no; read only = no; browseable = yes"
      # SAMBA_VOLUME_CONFIG_alicehidden: "[Alice Hidden Share]; path=/shares/alice-hidden; valid users = alice; guest ok = no; read only = no; browseable = no"      
      # SAMBA_VOLUME_CONFIG_public: "[Public]; path=/shares/public; valid users = alice, bob, foo; guest ok = no; read only = no; browseable = yes; force group = family"
      # SAMBA_VOLUME_CONFIG_public_ro: "[Public ReadOnly]; path=/shares/public; guest ok = yes; read only = yes; browseable = yes; force group = family"
      # SAMBA_VOLUME_CONFIG_timemachine: "[TimeMachine]; path=/shares/timemachine/%U; valid users = alice, bob, foo; guest ok = no; read only = no; browseable = yes; fruit:time machine = yes; fruit:time machine max size = 500G"
      # SAMBA_VOLUME_CONFIG_miguel: "[MiguelShare]; path=/shares/miguel; writeable = yes; valid users = miguel; guest ok = no; read only = no; browseable = yes; read raw = Yes; write raw = Yes; use sendfile = true"
    volumes:
      # - /etc/avahi/services/:/external/avahi
      # avoid loops when mounting folders to /shares (I'd recommend explicit mapping for each share)
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}:/shares/miguel
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Users/Father:/shares/joseluis
      - ./Configurations/smb.conf:/etc/samba/smb.conf:ro # TODO: use ro or rw?
      # - ./shares/alice-hidden:/shares/alice-hidden
      # - ./shares/bob:/shares/bob

  dlna:
    image: geekduck/minidlna:latest
    container_name: dlna_service
    network_mode: host # !important to help Devices discover DLNA
    volumes:
      # - <PATH_TO_MUSIC_DIR>:/opt/Music
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Movies:/opt/Videos/Movies
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Series:/opt/Videos/Series
      - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Pictures:/opt/Pictures
      - ./Configurations/minidlna.conf:/etc/minidlna.conf
    restart: unless-stopped

  nginx:
     image: nginx:latest
     container_name: nginx_service
     restart: unless-stopped
     ports:
       - "80:80"
     environment:
       - NGINX_HOST=lopezarcos.io
       - NGINX_PORT=80
     volumes:
       - ./Configurations/nginx.conf:/etc/nginx/nginx.conf:ro
     networks:
       - home_server
     extra_hosts:
      - host.docker.internal:host-gateway

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer_service
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./.ContainersData/Portainer:/data # Keep portainer config such as the user and host configured
    ports:
      - 9000:9000
    networks: 
      - home_server

  # pyload-ng:
  #   image: linuxserver/pyload-ng:latest
  #   container_name: pyload_service
  #   restart: unless-stopped
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=America/Mexico_City
  #   volumes:
  #     - ./.ContainersData/Pyload:/config
  #     - ${SHARED_DISK_MOUNT_POINT?You must specify the shared disk path}/Pyload/Downloads:/downloads
  #   ports:
  #     - 3000:8000
  #   networks: 
  #     - home_server

networks:
  home_server:
    name: home_server
    driver: bridge
